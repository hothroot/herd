---
export const prerender = false;
import BaseLayout from '../layouts/BaseLayout.astro';
import AddressForm from '../components/letter/AddressForm';
import Draft from '../components/letter/Draft';
import Receipt from '../components/letter/Receipt.astro';
import Error from '../components/letter/Error.astro';

import { type Address, type Reps, type Rep } from '@/scripts/letter-state.js';
import searchReps from '@/scripts/search-reps.ts';
import letterToPdf from '@/scripts/letter-format.js';
import { StorageApi } from '@/scripts/letter-store.js';
import { validateEnvelope } from "@/scripts/crypto";

const pageTitle = "Send a Letter";

var reps: Reps = [];
var links: Array<string> =[];
var isGet = true;
var isDraft = false;
var isDone = false;
var isValidEnvelope = false;

function formToString(value: FormDataEntryValue | null) {
    if (value === null) {
        return "";
    }
    if (typeof value === 'string') {
        return value;
    }
    return "";
}

if (Astro.request.method === 'POST') {
    isGet = false;
    const formData = await Astro.request.formData();
    var envelope;
    if (formData.has("envelope")) {
        var envelope = JSON.parse(formToString(formData.get("envelope")));
        isValidEnvelope = validateEnvelope(envelope);
        const address = envelope.address;
        const reps = envelope.reps
        const message = formToString(formData.get("message"));
        const today = formToString(formData.get("today"));
        let photoData: string | null = formToString(formData.get("headshot-data"));
        if (!photoData.startsWith("data:image/png")) {
            photoData = null;
        }
        const store = new StorageApi();
        const letters = reps.map((rep: Rep) => {
            return {
                filename: `${rep.salutation} - ${today} - ${address.name}.pdf`,
                data: letterToPdf(address, rep, today, message, photoData),
            }
        });
        links = await store.uploadLetters(letters);
        isDone = true; 
    } else {
        var address = { 
            name: formToString(formData.get("name")),
            street: formToString(formData.get("street")),
            city: formToString(formData.get("city")),
            state: formToString(formData.get("state")),
            zipcode: formToString(formData.get("zipcode")),
        }
        envelope = await searchReps(Astro.url.origin, address);
        console.log(envelope);
        isDraft = true;
    }
}
---
<BaseLayout pageTitle={pageTitle}>
    {isGet   && <AddressForm client:load /> }
    {isDraft && <Draft envelope={envelope} client:load /> } 
    {isDone && isValidEnvelope && <Receipt links={links} /> }
    {isDone && !isValidEnvelope && <Error /> }
</BaseLayout>